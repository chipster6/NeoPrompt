name: M1 Core — IR • RulePacks • HF wiring • API (offline)

on:
  pull_request:
    branches: [main, develop]
  push:
    branches:
      - "m1/**"
      - "feature/**"
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PYTHONDONTWRITEBYTECODE: "1"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"

jobs:
  track_engine:
    name: Track A — Engine IR & Planner
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - name: Install deps
        run: |
          pip install -r backend/requirements.txt || true
          if [ -f backend/requirements-dev.txt ]; then pip install -r backend/requirements-dev.txt; fi
          pip install pytest junitparser lxml
      - name: Run tests (engine)
        run: |
          mkdir -p reports
          pytest -q tests/engine --junitxml=reports/engine.junit.xml || true
          python - <<'PY'
          import os, sys, xml.etree.ElementTree as ET
          p='reports/engine.junit.xml'
          if not os.path.exists(p):
              sys.exit("NO_JUNIT")
          t=ET.parse(p).getroot()
          tests=int(t.attrib.get('tests',0))
          fails=int(t.attrib.get('failures',0))+int(t.attrib.get('errors',0))
          if tests==0: sys.exit("ZERO_TESTS")
          rate=(tests-fails)/tests
          print(f"pass_rate={rate:.3f}")
          sys.exit(0 if rate>=0.95 else 2)
          PY
      - name: Upload engine JUnit report
        uses: actions/upload-artifact@v4
        with:
          name: engine-junit
          path: reports/engine.junit.xml
          if-no-files-found: warn
          retention-days: 14

  track_rulepacks:
    name: Track B — RulePacks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - run: |
          pip install -r backend/requirements.txt || true
          if [ -f backend/requirements-dev.txt ]; then pip install -r backend/requirements-dev.txt; fi
          pip install pytest lxml pyyaml
      - name: Run tests (rulepacks)
        run: |
          mkdir -p reports
          pytest -q tests/rulepacks --junitxml=reports/rulepacks.junit.xml || true
          python - <<'PY'
          import os, sys, xml.etree.ElementTree as ET
          p='reports/rulepacks.junit.xml'
          if not os.path.exists(p): sys.exit("NO_JUNIT")
          t=ET.parse(p).getroot()
          tests=int(t.attrib.get('tests',0))
          fails=int(t.attrib.get('failures',0))+int(t.attrib.get('errors',0))
          if tests==0: sys.exit("ZERO_TESTS")
          rate=(tests-fails)/tests
          print(f"pass_rate={rate:.3f}")
          sys.exit(0 if rate>=0.95 else 2)
          PY

  track_hf_adapter:
    name: Track C — HF adapter (mocked)
    runs-on: ubuntu-latest
    env:
      HF_BASE: https://api-inference.huggingface.co
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - run: |
          pip install -r backend/requirements.txt || true
          if [ -f backend/requirements-dev.txt ]; then pip install -r backend/requirements-dev.txt; fi
          pip install pytest httpx requests prometheus_client
      - name: Unit tests (mocked retries/jitter + Retry-After)
        run: |
          mkdir -p reports
          pytest -q tests/providers/hf -k "not live" --junitxml=reports/hf.junit.xml || true
          python - <<'PY'
          import os, sys, xml.etree.ElementTree as ET
          p='reports/hf.junit.xml'
          if not os.path.exists(p): sys.exit("NO_JUNIT")
          t=ET.parse(p).getroot()
          tests=int(t.attrib.get('tests',0))
          if tests==0: sys.exit("ZERO_TESTS")
          PY
      - name: Live smoke (optional if secret present)
        if: ${{ secrets.HF_TOKEN != '' }}
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: pytest -q tests/providers/hf -m "live" -k "smoke" || true

  track_infra:
    name: Track E — Compose profile present
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: test -f infra/compose/docker-compose.local-hf.yml

  track_metrics:
    name: Track F — Metrics wiring present
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          grep -R "neopr_engine_requests_total" -n backend/app || (echo "Counter missing" && exit 1)
          grep -R "neopr_engine_latency_seconds" -n backend/app || (echo "Histogram missing" && exit 1)

  track_docs:
    name: Track G — Docs present
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          test -f docs/OPERATING_MODES.md
          test -f docs/PROVIDER_POLICY.md

  gate_api_offline:
    name: Gate D1 — API offline endpoints
    runs-on: ubuntu-latest
    needs: [track_engine, track_rulepacks]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - run: |
          pip install -r backend/requirements.txt || true
          if [ -f backend/requirements-dev.txt ]; then pip install -r backend/requirements-dev.txt; fi
          pip install pytest prometheus_client
      - name: API tests (offline path)
        run: |
          mkdir -p reports
          pytest -q tests/api/engine -k "offline" --junitxml=reports/api_engine_offline.junit.xml || true
          python - <<'PY'
          import os, sys, xml.etree.ElementTree as ET
          p='reports/api_engine_offline.junit.xml'
          if not os.path.exists(p): sys.exit("NO_JUNIT")
          t=ET.parse(p).getroot()
          tests=int(t.attrib.get('tests',0))
          if tests==0: sys.exit("ZERO_TESTS")
          PY

  gate_registry:
    name: Gate D2/D3 — Provider registry loads
    runs-on: ubuntu-latest
    needs: [track_hf_adapter, gate_api_offline]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - name: Import registry (no calls)
        run: |
          python - <<'PY'
          import importlib
          m = importlib.import_module("backend.app.adapters.providers")
          print("registry imported:", m is not None)
          PY

  m1_complete:
    name: ✅ M1 — Complete
    runs-on: ubuntu-latest
    needs: [track_engine, track_rulepacks, track_hf_adapter, track_infra, track_metrics, track_docs, gate_api_offline, gate_registry]
    if: >
      ${{
        needs.track_engine.result == 'success' &&
        needs.track_rulepacks.result == 'success' &&
        needs.track_hf_adapter.result == 'success' &&
        needs.track_infra.result == 'success' &&
        needs.track_metrics.result == 'success' &&
        needs.track_docs.result == 'success' &&
        needs.gate_api_offline.result == 'success' &&
        needs.gate_registry.result == 'success'
      }}
    steps:
      - run: echo "M1 done."
